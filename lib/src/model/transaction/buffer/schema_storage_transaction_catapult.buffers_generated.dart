// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library catapult.buffers;

import 'dart:typed_data' show Uint8List;

import 'package:flat_buffers/flat_buffers.dart' as fb;

class PrepareDriveTransactionBuffer {
  PrepareDriveTransactionBuffer._(this._bc, this._bcOffset);

  factory PrepareDriveTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PrepareDriveTransactionBuffer> reader = _PrepareDriveTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get owner => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  List<int>? get duration => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 20);

  List<int>? get billingPeriod => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 22);

  List<int>? get billingPrice => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 24);

  List<int>? get driveSize => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 26);

  int get replicas => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 28, 0);

  int get minReplicators => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 30, 0);

  int get percentApprovers => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 32, 0);

  @override
  String toString() {
    return 'PrepareDriveTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, owner: ${owner}, duration: ${duration}, billingPeriod: ${billingPeriod}, billingPrice: ${billingPrice}, driveSize: ${driveSize}, replicas: ${replicas}, minReplicators: ${minReplicators}, percentApprovers: ${percentApprovers}}';
  }
}

class _PrepareDriveTransactionBufferReader extends fb.TableReader<PrepareDriveTransactionBuffer> {
  const _PrepareDriveTransactionBufferReader();

  @override
  PrepareDriveTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      PrepareDriveTransactionBuffer._(bc, offset);
}

class PrepareDriveTransactionBufferBuilder {
  PrepareDriveTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(15);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addOwnerOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addDurationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addBillingPeriodOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int addBillingPriceOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int addDriveSizeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int addReplicas(int? replicas) {
    fbBuilder.addUint16(12, replicas);
    return fbBuilder.offset;
  }

  int addMinReplicators(int? minReplicators) {
    fbBuilder.addUint16(13, minReplicators);
    return fbBuilder.offset;
  }

  int addPercentApprovers(int? percentApprovers) {
    fbBuilder.addUint8(14, percentApprovers);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PrepareDriveTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _owner;
  final List<int>? _duration;
  final List<int>? _billingPeriod;
  final List<int>? _billingPrice;
  final List<int>? _driveSize;
  final int? _replicas;
  final int? _minReplicators;
  final int? _percentApprovers;

  PrepareDriveTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? owner,
    List<int>? duration,
    List<int>? billingPeriod,
    List<int>? billingPrice,
    List<int>? driveSize,
    int? replicas,
    int? minReplicators,
    int? percentApprovers,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _owner = owner,
        _duration = duration,
        _billingPeriod = billingPeriod,
        _billingPrice = billingPrice,
        _driveSize = driveSize,
        _replicas = replicas,
        _minReplicators = minReplicators,
        _percentApprovers = percentApprovers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? ownerOffset = _owner == null ? null : fbBuilder.writeListUint8(_owner!);
    final int? durationOffset = _duration == null ? null : fbBuilder.writeListUint32(_duration!);
    final int? billingPeriodOffset = _billingPeriod == null ? null : fbBuilder.writeListUint32(_billingPeriod!);
    final int? billingPriceOffset = _billingPrice == null ? null : fbBuilder.writeListUint32(_billingPrice!);
    final int? driveSizeOffset = _driveSize == null ? null : fbBuilder.writeListUint32(_driveSize!);
    fbBuilder.startTable(15);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, ownerOffset);
    fbBuilder.addOffset(8, durationOffset);
    fbBuilder.addOffset(9, billingPeriodOffset);
    fbBuilder.addOffset(10, billingPriceOffset);
    fbBuilder.addOffset(11, driveSizeOffset);
    fbBuilder.addUint16(12, _replicas);
    fbBuilder.addUint16(13, _minReplicators);
    fbBuilder.addUint8(14, _percentApprovers);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class JoinToDriveTransactionBuffer {
  JoinToDriveTransactionBuffer._(this._bc, this._bcOffset);

  factory JoinToDriveTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<JoinToDriveTransactionBuffer> reader = _JoinToDriveTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get driveKey => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'JoinToDriveTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, driveKey: ${driveKey}}';
  }
}

class _JoinToDriveTransactionBufferReader extends fb.TableReader<JoinToDriveTransactionBuffer> {
  const _JoinToDriveTransactionBufferReader();

  @override
  JoinToDriveTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      JoinToDriveTransactionBuffer._(bc, offset);
}

class JoinToDriveTransactionBufferBuilder {
  JoinToDriveTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addDriveKeyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class JoinToDriveTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _driveKey;

  JoinToDriveTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? driveKey,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _driveKey = driveKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? driveKeyOffset = _driveKey == null ? null : fbBuilder.writeListUint8(_driveKey!);
    fbBuilder.startTable(8);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, driveKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class AddActionBuffer {
  AddActionBuffer._(this._bc, this._bcOffset);

  factory AddActionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AddActionBuffer> reader = _AddActionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get fileHash => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  List<int>? get fileSize => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'AddActionBuffer{fileHash: ${fileHash}, fileSize: ${fileSize}}';
  }
}

class _AddActionBufferReader extends fb.TableReader<AddActionBuffer> {
  const _AddActionBufferReader();

  @override
  AddActionBuffer createObject(fb.BufferContext bc, int offset) => AddActionBuffer._(bc, offset);
}

class AddActionBufferBuilder {
  AddActionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addFileHashOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addFileSizeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AddActionBufferObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _fileHash;
  final List<int>? _fileSize;

  AddActionBufferObjectBuilder({
    List<int>? fileHash,
    List<int>? fileSize,
  })  : _fileHash = fileHash,
        _fileSize = fileSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? fileHashOffset = _fileHash == null ? null : fbBuilder.writeListUint8(_fileHash!);
    final int? fileSizeOffset = _fileSize == null ? null : fbBuilder.writeListUint8(_fileSize!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, fileHashOffset);
    fbBuilder.addOffset(1, fileSizeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class RemoveActionBuffer {
  RemoveActionBuffer._(this._bc, this._bcOffset);

  factory RemoveActionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RemoveActionBuffer> reader = _RemoveActionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get fileHash => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  List<int>? get fileSize => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'RemoveActionBuffer{fileHash: ${fileHash}, fileSize: ${fileSize}}';
  }
}

class _RemoveActionBufferReader extends fb.TableReader<RemoveActionBuffer> {
  const _RemoveActionBufferReader();

  @override
  RemoveActionBuffer createObject(fb.BufferContext bc, int offset) => RemoveActionBuffer._(bc, offset);
}

class RemoveActionBufferBuilder {
  RemoveActionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addFileHashOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addFileSizeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RemoveActionBufferObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _fileHash;
  final List<int>? _fileSize;

  RemoveActionBufferObjectBuilder({
    List<int>? fileHash,
    List<int>? fileSize,
  })  : _fileHash = fileHash,
        _fileSize = fileSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? fileHashOffset = _fileHash == null ? null : fbBuilder.writeListUint8(_fileHash!);
    final int? fileSizeOffset = _fileSize == null ? null : fbBuilder.writeListUint8(_fileSize!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, fileHashOffset);
    fbBuilder.addOffset(1, fileSizeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class FileBuffer {
  FileBuffer._(this._bc, this._bcOffset);

  factory FileBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FileBuffer> reader = _FileBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get fileHash => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'FileBuffer{fileHash: ${fileHash}}';
  }
}

class _FileBufferReader extends fb.TableReader<FileBuffer> {
  const _FileBufferReader();

  @override
  FileBuffer createObject(fb.BufferContext bc, int offset) => FileBuffer._(bc, offset);
}

class FileBufferBuilder {
  FileBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addFileHashOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FileBufferObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _fileHash;

  FileBufferObjectBuilder({
    List<int>? fileHash,
  }) : _fileHash = fileHash;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? fileHashOffset = _fileHash == null ? null : fbBuilder.writeListUint8(_fileHash!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, fileHashOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class UploadInfoBuffer {
  UploadInfoBuffer._(this._bc, this._bcOffset);

  factory UploadInfoBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UploadInfoBuffer> reader = _UploadInfoBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get replicator => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  List<int>? get uploaded => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'UploadInfoBuffer{replicator: ${replicator}, uploaded: ${uploaded}}';
  }
}

class _UploadInfoBufferReader extends fb.TableReader<UploadInfoBuffer> {
  const _UploadInfoBufferReader();

  @override
  UploadInfoBuffer createObject(fb.BufferContext bc, int offset) => UploadInfoBuffer._(bc, offset);
}

class UploadInfoBufferBuilder {
  UploadInfoBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addReplicatorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addUploadedOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UploadInfoBufferObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _replicator;
  final List<int>? _uploaded;

  UploadInfoBufferObjectBuilder({
    List<int>? replicator,
    List<int>? uploaded,
  })  : _replicator = replicator,
        _uploaded = uploaded;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? replicatorOffset = _replicator == null ? null : fbBuilder.writeListUint8(_replicator!);
    final int? uploadedOffset = _uploaded == null ? null : fbBuilder.writeListUint32(_uploaded!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, replicatorOffset);
    fbBuilder.addOffset(1, uploadedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DriveFileSystemTransactionBuffer {
  DriveFileSystemTransactionBuffer._(this._bc, this._bcOffset);

  factory DriveFileSystemTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DriveFileSystemTransactionBuffer> reader = _DriveFileSystemTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get driveKey => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  List<int>? get rootHash => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 20);

  List<int>? get xorRootHash => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 22);

  List<int>? get addActionsCount => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 24);

  List<int>? get removeActionsCount => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 26);

  List<AddActionBuffer>? get addActions =>
      const fb.ListReader<AddActionBuffer>(AddActionBuffer.reader).vTableGetNullable(_bc, _bcOffset, 28);

  List<RemoveActionBuffer>? get removeActions =>
      const fb.ListReader<RemoveActionBuffer>(RemoveActionBuffer.reader).vTableGetNullable(_bc, _bcOffset, 30);

  @override
  String toString() {
    return 'DriveFileSystemTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, driveKey: ${driveKey}, rootHash: ${rootHash}, xorRootHash: ${xorRootHash}, addActionsCount: ${addActionsCount}, removeActionsCount: ${removeActionsCount}, addActions: ${addActions}, removeActions: ${removeActions}}';
  }
}

class _DriveFileSystemTransactionBufferReader extends fb.TableReader<DriveFileSystemTransactionBuffer> {
  const _DriveFileSystemTransactionBufferReader();

  @override
  DriveFileSystemTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      DriveFileSystemTransactionBuffer._(bc, offset);
}

class DriveFileSystemTransactionBufferBuilder {
  DriveFileSystemTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(14);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addDriveKeyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addRootHashOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addXorRootHashOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int addAddActionsCountOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int addRemoveActionsCountOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int addAddActionsOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int addRemoveActionsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DriveFileSystemTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _driveKey;
  final List<int>? _rootHash;
  final List<int>? _xorRootHash;
  final List<int>? _addActionsCount;
  final List<int>? _removeActionsCount;
  final List<AddActionBufferObjectBuilder>? _addActions;
  final List<RemoveActionBufferObjectBuilder>? _removeActions;

  DriveFileSystemTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? driveKey,
    List<int>? rootHash,
    List<int>? xorRootHash,
    List<int>? addActionsCount,
    List<int>? removeActionsCount,
    List<AddActionBufferObjectBuilder>? addActions,
    List<RemoveActionBufferObjectBuilder>? removeActions,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _driveKey = driveKey,
        _rootHash = rootHash,
        _xorRootHash = xorRootHash,
        _addActionsCount = addActionsCount,
        _removeActionsCount = removeActionsCount,
        _addActions = addActions,
        _removeActions = removeActions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? driveKeyOffset = _driveKey == null ? null : fbBuilder.writeListUint8(_driveKey!);
    final int? rootHashOffset = _rootHash == null ? null : fbBuilder.writeListUint8(_rootHash!);
    final int? xorRootHashOffset = _xorRootHash == null ? null : fbBuilder.writeListUint8(_xorRootHash!);
    final int? addActionsCountOffset = _addActionsCount == null ? null : fbBuilder.writeListUint8(_addActionsCount!);
    final int? removeActionsCountOffset =
        _removeActionsCount == null ? null : fbBuilder.writeListUint8(_removeActionsCount!);
    final int? addActionsOffset = _addActions == null
        ? null
        : fbBuilder.writeList(_addActions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? removeActionsOffset = _removeActions == null
        ? null
        : fbBuilder.writeList(_removeActions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(14);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, driveKeyOffset);
    fbBuilder.addOffset(8, rootHashOffset);
    fbBuilder.addOffset(9, xorRootHashOffset);
    fbBuilder.addOffset(10, addActionsCountOffset);
    fbBuilder.addOffset(11, removeActionsCountOffset);
    fbBuilder.addOffset(12, addActionsOffset);
    fbBuilder.addOffset(13, removeActionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class FilesDepositTransactionBuffer {
  FilesDepositTransactionBuffer._(this._bc, this._bcOffset);

  factory FilesDepositTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FilesDepositTransactionBuffer> reader = _FilesDepositTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get driveKey => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  int get filesCount => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 20, 0);

  List<FileBuffer>? get files =>
      const fb.ListReader<FileBuffer>(FileBuffer.reader).vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'FilesDepositTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, driveKey: ${driveKey}, filesCount: ${filesCount}, files: ${files}}';
  }
}

class _FilesDepositTransactionBufferReader extends fb.TableReader<FilesDepositTransactionBuffer> {
  const _FilesDepositTransactionBufferReader();

  @override
  FilesDepositTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      FilesDepositTransactionBuffer._(bc, offset);
}

class FilesDepositTransactionBufferBuilder {
  FilesDepositTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addDriveKeyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addFilesCount(int? filesCount) {
    fbBuilder.addUint16(8, filesCount);
    return fbBuilder.offset;
  }

  int addFilesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FilesDepositTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _driveKey;
  final int? _filesCount;
  final List<FileBufferObjectBuilder>? _files;

  FilesDepositTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? driveKey,
    int? filesCount,
    List<FileBufferObjectBuilder>? files,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _driveKey = driveKey,
        _filesCount = filesCount,
        _files = files;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? driveKeyOffset = _driveKey == null ? null : fbBuilder.writeListUint8(_driveKey!);
    final int? filesOffset =
        _files == null ? null : fbBuilder.writeList(_files!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, driveKeyOffset);
    fbBuilder.addUint16(8, _filesCount);
    fbBuilder.addOffset(9, filesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EndDriveTransactionBuffer {
  EndDriveTransactionBuffer._(this._bc, this._bcOffset);

  factory EndDriveTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndDriveTransactionBuffer> reader = _EndDriveTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get driveKey => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'EndDriveTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, driveKey: ${driveKey}}';
  }
}

class _EndDriveTransactionBufferReader extends fb.TableReader<EndDriveTransactionBuffer> {
  const _EndDriveTransactionBufferReader();

  @override
  EndDriveTransactionBuffer createObject(fb.BufferContext bc, int offset) => EndDriveTransactionBuffer._(bc, offset);
}

class EndDriveTransactionBufferBuilder {
  EndDriveTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addDriveKeyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndDriveTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _driveKey;

  EndDriveTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? driveKey,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _driveKey = driveKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? driveKeyOffset = _driveKey == null ? null : fbBuilder.writeListUint8(_driveKey!);
    fbBuilder.startTable(8);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, driveKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DriveFilesRewardTransactionBuffer {
  DriveFilesRewardTransactionBuffer._(this._bc, this._bcOffset);

  factory DriveFilesRewardTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DriveFilesRewardTransactionBuffer> reader = _DriveFilesRewardTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  int get uploadInfosCount => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 18, 0);

  List<UploadInfoBuffer>? get uploadInfos =>
      const fb.ListReader<UploadInfoBuffer>(UploadInfoBuffer.reader).vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'DriveFilesRewardTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, uploadInfosCount: ${uploadInfosCount}, uploadInfos: ${uploadInfos}}';
  }
}

class _DriveFilesRewardTransactionBufferReader extends fb.TableReader<DriveFilesRewardTransactionBuffer> {
  const _DriveFilesRewardTransactionBufferReader();

  @override
  DriveFilesRewardTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      DriveFilesRewardTransactionBuffer._(bc, offset);
}

class DriveFilesRewardTransactionBufferBuilder {
  DriveFilesRewardTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addUploadInfosCount(int? uploadInfosCount) {
    fbBuilder.addUint16(7, uploadInfosCount);
    return fbBuilder.offset;
  }

  int addUploadInfosOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DriveFilesRewardTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final int? _uploadInfosCount;
  final List<UploadInfoBufferObjectBuilder>? _uploadInfos;

  DriveFilesRewardTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    int? uploadInfosCount,
    List<UploadInfoBufferObjectBuilder>? uploadInfos,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _uploadInfosCount = uploadInfosCount,
        _uploadInfos = uploadInfos;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? uploadInfosOffset = _uploadInfos == null
        ? null
        : fbBuilder.writeList(_uploadInfos!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addUint16(7, _uploadInfosCount);
    fbBuilder.addOffset(8, uploadInfosOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class StartDriveVerificationTransactionBuffer {
  StartDriveVerificationTransactionBuffer._(this._bc, this._bcOffset);

  factory StartDriveVerificationTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StartDriveVerificationTransactionBuffer> reader =
      _StartDriveVerificationTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get driveKey => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'StartDriveVerificationTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, driveKey: ${driveKey}}';
  }
}

class _StartDriveVerificationTransactionBufferReader extends fb.TableReader<StartDriveVerificationTransactionBuffer> {
  const _StartDriveVerificationTransactionBufferReader();

  @override
  StartDriveVerificationTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      StartDriveVerificationTransactionBuffer._(bc, offset);
}

class StartDriveVerificationTransactionBufferBuilder {
  StartDriveVerificationTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addDriveKeyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StartDriveVerificationTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _driveKey;

  StartDriveVerificationTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? driveKey,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _driveKey = driveKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? driveKeyOffset = _driveKey == null ? null : fbBuilder.writeListUint8(_driveKey!);
    fbBuilder.startTable(8);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, driveKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class BlockHashBuffer {
  BlockHashBuffer._(this._bc, this._bcOffset);

  factory BlockHashBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BlockHashBuffer> reader = _BlockHashBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get blockHashe => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'BlockHashBuffer{blockHashe: ${blockHashe}}';
  }
}

class _BlockHashBufferReader extends fb.TableReader<BlockHashBuffer> {
  const _BlockHashBufferReader();

  @override
  BlockHashBuffer createObject(fb.BufferContext bc, int offset) => BlockHashBuffer._(bc, offset);
}

class BlockHashBufferBuilder {
  BlockHashBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addBlockHasheOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BlockHashBufferObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _blockHashe;

  BlockHashBufferObjectBuilder({
    List<int>? blockHashe,
  }) : _blockHashe = blockHashe;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? blockHasheOffset = _blockHashe == null ? null : fbBuilder.writeListUint8(_blockHashe!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, blockHasheOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerificationFailureBuffer {
  VerificationFailureBuffer._(this._bc, this._bcOffset);

  factory VerificationFailureBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerificationFailureBuffer> reader = _VerificationFailureBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get replicator => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<BlockHashBuffer>? get blockHashes =>
      const fb.ListReader<BlockHashBuffer>(BlockHashBuffer.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VerificationFailureBuffer{size: ${size}, replicator: ${replicator}, blockHashes: ${blockHashes}}';
  }
}

class _VerificationFailureBufferReader extends fb.TableReader<VerificationFailureBuffer> {
  const _VerificationFailureBufferReader();

  @override
  VerificationFailureBuffer createObject(fb.BufferContext bc, int offset) => VerificationFailureBuffer._(bc, offset);
}

class VerificationFailureBufferBuilder {
  VerificationFailureBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addReplicatorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addBlockHashesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerificationFailureBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _replicator;
  final List<BlockHashBufferObjectBuilder>? _blockHashes;

  VerificationFailureBufferObjectBuilder({
    int? size,
    List<int>? replicator,
    List<BlockHashBufferObjectBuilder>? blockHashes,
  })  : _size = size,
        _replicator = replicator,
        _blockHashes = blockHashes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? replicatorOffset = _replicator == null ? null : fbBuilder.writeListUint8(_replicator!);
    final int? blockHashesOffset = _blockHashes == null
        ? null
        : fbBuilder.writeList(_blockHashes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, replicatorOffset);
    fbBuilder.addOffset(2, blockHashesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EndDriveVerificationTransactionBuffer {
  EndDriveVerificationTransactionBuffer._(this._bc, this._bcOffset);

  factory EndDriveVerificationTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndDriveVerificationTransactionBuffer> reader = _EndDriveVerificationTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<VerificationFailureBuffer>? get failures =>
      const fb.ListReader<VerificationFailureBuffer>(VerificationFailureBuffer.reader)
          .vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'EndDriveVerificationTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, failures: ${failures}}';
  }
}

class _EndDriveVerificationTransactionBufferReader extends fb.TableReader<EndDriveVerificationTransactionBuffer> {
  const _EndDriveVerificationTransactionBufferReader();

  @override
  EndDriveVerificationTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      EndDriveVerificationTransactionBuffer._(bc, offset);
}

class EndDriveVerificationTransactionBufferBuilder {
  EndDriveVerificationTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addFailuresOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndDriveVerificationTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<VerificationFailureBufferObjectBuilder>? _failures;

  EndDriveVerificationTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<VerificationFailureBufferObjectBuilder>? failures,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _failures = failures;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? failuresOffset =
        _failures == null ? null : fbBuilder.writeList(_failures!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, failuresOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class StartFileDownloadTransactionBuffer {
  StartFileDownloadTransactionBuffer._(this._bc, this._bcOffset);

  factory StartFileDownloadTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StartFileDownloadTransactionBuffer> reader = _StartFileDownloadTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get driveKey => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  int get fileCount => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 20, 0);

  List<AddActionBuffer>? get files =>
      const fb.ListReader<AddActionBuffer>(AddActionBuffer.reader).vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'StartFileDownloadTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, driveKey: ${driveKey}, fileCount: ${fileCount}, files: ${files}}';
  }
}

class _StartFileDownloadTransactionBufferReader extends fb.TableReader<StartFileDownloadTransactionBuffer> {
  const _StartFileDownloadTransactionBufferReader();

  @override
  StartFileDownloadTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      StartFileDownloadTransactionBuffer._(bc, offset);
}

class StartFileDownloadTransactionBufferBuilder {
  StartFileDownloadTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addDriveKeyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addFileCount(int? fileCount) {
    fbBuilder.addUint16(8, fileCount);
    return fbBuilder.offset;
  }

  int addFilesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StartFileDownloadTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _driveKey;
  final int? _fileCount;
  final List<AddActionBufferObjectBuilder>? _files;

  StartFileDownloadTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? driveKey,
    int? fileCount,
    List<AddActionBufferObjectBuilder>? files,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _driveKey = driveKey,
        _fileCount = fileCount,
        _files = files;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? driveKeyOffset = _driveKey == null ? null : fbBuilder.writeListUint8(_driveKey!);
    final int? filesOffset =
        _files == null ? null : fbBuilder.writeList(_files!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, driveKeyOffset);
    fbBuilder.addUint16(8, _fileCount);
    fbBuilder.addOffset(9, filesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EndFileDownloadTransactionBuffer {
  EndFileDownloadTransactionBuffer._(this._bc, this._bcOffset);

  factory EndFileDownloadTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndFileDownloadTransactionBuffer> reader = _EndFileDownloadTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get recipient => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  List<int>? get operationToken => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 20);

  int get fileCount => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 22, 0);

  List<RemoveActionBuffer>? get files =>
      const fb.ListReader<RemoveActionBuffer>(RemoveActionBuffer.reader).vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'EndFileDownloadTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, recipient: ${recipient}, operationToken: ${operationToken}, fileCount: ${fileCount}, files: ${files}}';
  }
}

class _EndFileDownloadTransactionBufferReader extends fb.TableReader<EndFileDownloadTransactionBuffer> {
  const _EndFileDownloadTransactionBufferReader();

  @override
  EndFileDownloadTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      EndFileDownloadTransactionBuffer._(bc, offset);
}

class EndFileDownloadTransactionBufferBuilder {
  EndFileDownloadTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addRecipientOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addOperationTokenOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addFileCount(int? fileCount) {
    fbBuilder.addUint16(9, fileCount);
    return fbBuilder.offset;
  }

  int addFilesOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndFileDownloadTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _recipient;
  final List<int>? _operationToken;
  final int? _fileCount;
  final List<RemoveActionBufferObjectBuilder>? _files;

  EndFileDownloadTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? recipient,
    List<int>? operationToken,
    int? fileCount,
    List<RemoveActionBufferObjectBuilder>? files,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _recipient = recipient,
        _operationToken = operationToken,
        _fileCount = fileCount,
        _files = files;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset = _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset = _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset = _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset = _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? recipientOffset = _recipient == null ? null : fbBuilder.writeListUint8(_recipient!);
    final int? operationTokenOffset = _operationToken == null ? null : fbBuilder.writeListUint8(_operationToken!);
    final int? filesOffset =
        _files == null ? null : fbBuilder.writeList(_files!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, recipientOffset);
    fbBuilder.addOffset(8, operationTokenOffset);
    fbBuilder.addUint16(9, _fileCount);
    fbBuilder.addOffset(10, filesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
