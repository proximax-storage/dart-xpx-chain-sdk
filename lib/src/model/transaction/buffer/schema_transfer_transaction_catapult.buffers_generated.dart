// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library catapult.buffers;

import 'dart:typed_data' show Uint8List;

import 'package:flat_buffers/flat_buffers.dart' as fb;

import './schema_operation_transaction_catapult.buffers_generated.dart';

class MessageBuffer {
  MessageBuffer._(this._bc, this._bcOffset);

  factory MessageBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageBuffer> reader = _MessageBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get type => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get payload =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'MessageBuffer{type: ${type}, payload: ${payload}}';
  }
}

class _MessageBufferReader extends fb.TableReader<MessageBuffer> {
  const _MessageBufferReader();

  @override
  MessageBuffer createObject(fb.BufferContext bc, int offset) =>
      MessageBuffer._(bc, offset);
}

class MessageBufferBuilder {
  MessageBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addType(int? type) {
    fbBuilder.addUint8(0, type);
    return fbBuilder.offset;
  }

  int addPayloadOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _type;
  final List<int>? _payload;

  MessageBufferObjectBuilder({
    int? type,
    List<int>? payload,
  })  : _type = type,
        _payload = payload;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? payloadOffset =
        _payload == null ? null : fbBuilder.writeListUint8(_payload!);
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _type);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class TransferTransactionBuffer {
  TransferTransactionBuffer._(this._bc, this._bcOffset);

  factory TransferTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransferTransactionBuffer> reader =
      _TransferTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get recipient =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  int get messageSize =>
      const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 20, 0);

  int get numMosaics => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 22, 0);

  MessageBuffer? get message =>
      MessageBuffer.reader.vTableGetNullable(_bc, _bcOffset, 24);

  List<MosaicBuffer>? get mosaics =>
      const fb.ListReader<MosaicBuffer>(MosaicBuffer.reader)
          .vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'TransferTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, recipient: ${recipient}, messageSize: ${messageSize}, numMosaics: ${numMosaics}, message: ${message}, mosaics: ${mosaics}}';
  }
}

class _TransferTransactionBufferReader
    extends fb.TableReader<TransferTransactionBuffer> {
  const _TransferTransactionBufferReader();

  @override
  TransferTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      TransferTransactionBuffer._(bc, offset);
}

class TransferTransactionBufferBuilder {
  TransferTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addRecipientOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addMessageSize(int? messageSize) {
    fbBuilder.addUint16(8, messageSize);
    return fbBuilder.offset;
  }

  int addNumMosaics(int? numMosaics) {
    fbBuilder.addUint8(9, numMosaics);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int addMosaicsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransferTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _recipient;
  final int? _messageSize;
  final int? _numMosaics;
  final MessageBufferObjectBuilder? _message;
  final List<MosaicBufferObjectBuilder>? _mosaics;

  TransferTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? recipient,
    int? messageSize,
    int? numMosaics,
    MessageBufferObjectBuilder? message,
    List<MosaicBufferObjectBuilder>? mosaics,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _recipient = recipient,
        _messageSize = messageSize,
        _numMosaics = numMosaics,
        _message = message,
        _mosaics = mosaics;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset =
        _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset =
        _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset =
        _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? recipientOffset =
        _recipient == null ? null : fbBuilder.writeListUint8(_recipient!);
    final int? messageOffset = _message?.getOrCreateOffset(fbBuilder);
    final int? mosaicsOffset = _mosaics == null
        ? null
        : fbBuilder.writeList(
            _mosaics!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(12);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, recipientOffset);
    fbBuilder.addUint16(8, _messageSize);
    fbBuilder.addUint8(9, _numMosaics);
    fbBuilder.addOffset(10, messageOffset);
    fbBuilder.addOffset(11, mosaicsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
