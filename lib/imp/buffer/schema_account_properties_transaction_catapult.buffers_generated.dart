// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library catapult.buffers;

import 'dart:typed_data' show Uint8List;

import 'package:flat_buffers/flat_buffers.dart' as fb;

class PropertyModificationBuffer {
  PropertyModificationBuffer._(this._bc, this._bcOffset);
  factory PropertyModificationBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PropertyModificationBuffer> reader =
      _PropertyModificationBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get modificationType =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);

  ///  In case of address it is 25 bytes array. In case of mosaic it is 8 byte array(or 2 uint32 array).
  ///  In case of transaction it is 2 byte array(ushort)
  List<int>? get value =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PropertyModificationBuffer{modificationType: ${modificationType}, value: ${value}}';
  }
}

class _PropertyModificationBufferReader
    extends fb.TableReader<PropertyModificationBuffer> {
  const _PropertyModificationBufferReader();

  @override
  PropertyModificationBuffer createObject(fb.BufferContext bc, int offset) =>
      PropertyModificationBuffer._(bc, offset);
}

class PropertyModificationBufferBuilder {
  PropertyModificationBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addModificationType(int? modificationType) {
    fbBuilder.addUint8(0, modificationType);
    return fbBuilder.offset;
  }

  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PropertyModificationBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _modificationType;
  final List<int>? _value;

  PropertyModificationBufferObjectBuilder({
    int? modificationType,
    List<int>? value,
  })  : _modificationType = modificationType,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valueOffset =
        _value == null ? null : fbBuilder.writeListUint8(_value!);
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _modificationType);
    fbBuilder.addOffset(1, valueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class AccountPropertiesTransactionBuffer {
  AccountPropertiesTransactionBuffer._(this._bc, this._bcOffset);
  factory AccountPropertiesTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountPropertiesTransactionBuffer> reader =
      _AccountPropertiesTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<int>? get signer =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);
  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 14);
  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 16);
  int get propertyType =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 18, 0);
  int get modificationCount =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 20, 0);
  List<PropertyModificationBuffer>? get modifications =>
      const fb.ListReader<PropertyModificationBuffer>(
              PropertyModificationBuffer.reader)
          .vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'AccountPropertiesTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, propertyType: ${propertyType}, modificationCount: ${modificationCount}, modifications: ${modifications}}';
  }
}

class _AccountPropertiesTransactionBufferReader
    extends fb.TableReader<AccountPropertiesTransactionBuffer> {
  const _AccountPropertiesTransactionBufferReader();

  @override
  AccountPropertiesTransactionBuffer createObject(
          fb.BufferContext bc, int offset) =>
      AccountPropertiesTransactionBuffer._(bc, offset);
}

class AccountPropertiesTransactionBufferBuilder {
  AccountPropertiesTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addPropertyType(int? propertyType) {
    fbBuilder.addUint8(7, propertyType);
    return fbBuilder.offset;
  }

  int addModificationCount(int? modificationCount) {
    fbBuilder.addUint8(8, modificationCount);
    return fbBuilder.offset;
  }

  int addModificationsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountPropertiesTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final int? _propertyType;
  final int? _modificationCount;
  final List<PropertyModificationBufferObjectBuilder>? _modifications;

  AccountPropertiesTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    int? propertyType,
    int? modificationCount,
    List<PropertyModificationBufferObjectBuilder>? modifications,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _propertyType = propertyType,
        _modificationCount = modificationCount,
        _modifications = modifications;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset =
        _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset =
        _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset =
        _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? modificationsOffset = _modifications == null
        ? null
        : fbBuilder.writeList(_modifications!
            .map((b) => b.getOrCreateOffset(fbBuilder))
            .toList());
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addUint8(7, _propertyType);
    fbBuilder.addUint8(8, _modificationCount);
    fbBuilder.addOffset(9, modificationsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
