// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library catapult.buffers;

import 'dart:typed_data' show Uint8List;

import 'package:flat_buffers/flat_buffers.dart' as fb;

class OperationIdentifyTransactionBuffer {
  OperationIdentifyTransactionBuffer._(this._bc, this._bcOffset);

  factory OperationIdentifyTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OperationIdentifyTransactionBuffer> reader =
      _OperationIdentifyTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 16);

  List<int>? get operationToken =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'OperationIdentifyTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, operationToken: ${operationToken}}';
  }
}

class _OperationIdentifyTransactionBufferReader
    extends fb.TableReader<OperationIdentifyTransactionBuffer> {
  const _OperationIdentifyTransactionBufferReader();

  @override
  OperationIdentifyTransactionBuffer createObject(
          fb.BufferContext bc, int offset) =>
      OperationIdentifyTransactionBuffer._(bc, offset);
}

class OperationIdentifyTransactionBufferBuilder {
  OperationIdentifyTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addOperationTokenOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OperationIdentifyTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final List<int>? _operationToken;

  OperationIdentifyTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    List<int>? operationToken,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _operationToken = operationToken;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset =
        _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset =
        _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset =
        _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? operationTokenOffset = _operationToken == null
        ? null
        : fbBuilder.writeListUint8(_operationToken!);
    fbBuilder.startTable(8);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addOffset(7, operationTokenOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class MosaicBuffer {
  MosaicBuffer._(this._bc, this._bcOffset);

  factory MosaicBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MosaicBuffer> reader = _MosaicBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get id => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 4);

  List<int>? get amount => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'MosaicBuffer{id: ${id}, amount: ${amount}}';
  }
}

class _MosaicBufferReader extends fb.TableReader<MosaicBuffer> {
  const _MosaicBufferReader();

  @override
  MosaicBuffer createObject(fb.BufferContext bc, int offset) =>
      MosaicBuffer._(bc, offset);
}

class MosaicBufferBuilder {
  MosaicBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addAmountOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MosaicBufferObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _id;
  final List<int>? _amount;

  MosaicBufferObjectBuilder({
    List<int>? id,
    List<int>? amount,
  })  : _id = id,
        _amount = amount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null : fbBuilder.writeListUint32(_id!);
    final int? amountOffset =
        _amount == null ? null : fbBuilder.writeListUint32(_amount!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, amountOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class StartOperationTransactionBuffer {
  StartOperationTransactionBuffer._(this._bc, this._bcOffset);

  factory StartOperationTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StartOperationTransactionBuffer> reader =
      _StartOperationTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 16);

  int get mosaicsCount =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 18, 0);

  List<int>? get duration => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 20);

  int get executorsCount =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 22, 0);

  List<MosaicBuffer>? get mosaics =>
      const fb.ListReader<MosaicBuffer>(MosaicBuffer.reader)
          .vTableGetNullable(_bc, _bcOffset, 24);

  List<int>? get executors =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'StartOperationTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, mosaicsCount: ${mosaicsCount}, duration: ${duration}, executorsCount: ${executorsCount}, mosaics: ${mosaics}, executors: ${executors}}';
  }
}

class _StartOperationTransactionBufferReader
    extends fb.TableReader<StartOperationTransactionBuffer> {
  const _StartOperationTransactionBufferReader();

  @override
  StartOperationTransactionBuffer createObject(
          fb.BufferContext bc, int offset) =>
      StartOperationTransactionBuffer._(bc, offset);
}

class StartOperationTransactionBufferBuilder {
  StartOperationTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addMosaicsCount(int? mosaicsCount) {
    fbBuilder.addUint8(7, mosaicsCount);
    return fbBuilder.offset;
  }

  int addDurationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addExecutorsCount(int? executorsCount) {
    fbBuilder.addUint8(9, executorsCount);
    return fbBuilder.offset;
  }

  int addMosaicsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int addExecutorsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StartOperationTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final int? _mosaicsCount;
  final List<int>? _duration;
  final int? _executorsCount;
  final List<MosaicBufferObjectBuilder>? _mosaics;
  final List<int>? _executors;

  StartOperationTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    int? mosaicsCount,
    List<int>? duration,
    int? executorsCount,
    List<MosaicBufferObjectBuilder>? mosaics,
    List<int>? executors,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _mosaicsCount = mosaicsCount,
        _duration = duration,
        _executorsCount = executorsCount,
        _mosaics = mosaics,
        _executors = executors;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset =
        _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset =
        _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset =
        _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? durationOffset =
        _duration == null ? null : fbBuilder.writeListUint32(_duration!);
    final int? mosaicsOffset = _mosaics == null
        ? null
        : fbBuilder.writeList(
            _mosaics!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? executorsOffset =
        _executors == null ? null : fbBuilder.writeListUint8(_executors!);
    fbBuilder.startTable(12);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addUint8(7, _mosaicsCount);
    fbBuilder.addOffset(8, durationOffset);
    fbBuilder.addUint8(9, _executorsCount);
    fbBuilder.addOffset(10, mosaicsOffset);
    fbBuilder.addOffset(11, executorsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EndOperationTransactionBuffer {
  EndOperationTransactionBuffer._(this._bc, this._bcOffset);

  factory EndOperationTransactionBuffer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndOperationTransactionBuffer> reader =
      _EndOperationTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  List<int>? get signer =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  int get version => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);

  List<int>? get maxFee => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 14);

  List<int>? get deadline => const fb.ListReader<int>(fb.Uint32Reader())
      .vTableGetNullable(_bc, _bcOffset, 16);

  int get mosaicsCount =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 18, 0);

  List<int>? get operationToken =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 20);

  int get status => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 22, 0);

  List<MosaicBuffer>? get mosaics =>
      const fb.ListReader<MosaicBuffer>(MosaicBuffer.reader)
          .vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'EndOperationTransactionBuffer{size: ${size}, signature: ${signature}, signer: ${signer}, version: ${version}, type: ${type}, maxFee: ${maxFee}, deadline: ${deadline}, mosaicsCount: ${mosaicsCount}, operationToken: ${operationToken}, status: ${status}, mosaics: ${mosaics}}';
  }
}

class _EndOperationTransactionBufferReader
    extends fb.TableReader<EndOperationTransactionBuffer> {
  const _EndOperationTransactionBufferReader();

  @override
  EndOperationTransactionBuffer createObject(fb.BufferContext bc, int offset) =>
      EndOperationTransactionBuffer._(bc, offset);
}

class EndOperationTransactionBufferBuilder {
  EndOperationTransactionBufferBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addSize(int? size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int? version) {
    fbBuilder.addUint32(3, version);
    return fbBuilder.offset;
  }

  int addType(int? type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addMaxFeeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addMosaicsCount(int? mosaicsCount) {
    fbBuilder.addUint8(7, mosaicsCount);
    return fbBuilder.offset;
  }

  int addOperationTokenOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addStatus(int? status) {
    fbBuilder.addUint16(9, status);
    return fbBuilder.offset;
  }

  int addMosaicsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndOperationTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int? _size;
  final List<int>? _signature;
  final List<int>? _signer;
  final int? _version;
  final int? _type;
  final List<int>? _maxFee;
  final List<int>? _deadline;
  final int? _mosaicsCount;
  final List<int>? _operationToken;
  final int? _status;
  final List<MosaicBufferObjectBuilder>? _mosaics;

  EndOperationTransactionBufferObjectBuilder({
    int? size,
    List<int>? signature,
    List<int>? signer,
    int? version,
    int? type,
    List<int>? maxFee,
    List<int>? deadline,
    int? mosaicsCount,
    List<int>? operationToken,
    int? status,
    List<MosaicBufferObjectBuilder>? mosaics,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _maxFee = maxFee,
        _deadline = deadline,
        _mosaicsCount = mosaicsCount,
        _operationToken = operationToken,
        _status = status,
        _mosaics = mosaics;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? signerOffset =
        _signer == null ? null : fbBuilder.writeListUint8(_signer!);
    final int? maxFeeOffset =
        _maxFee == null ? null : fbBuilder.writeListUint32(_maxFee!);
    final int? deadlineOffset =
        _deadline == null ? null : fbBuilder.writeListUint32(_deadline!);
    final int? operationTokenOffset = _operationToken == null
        ? null
        : fbBuilder.writeListUint8(_operationToken!);
    final int? mosaicsOffset = _mosaics == null
        ? null
        : fbBuilder.writeList(
            _mosaics!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, _size);
    fbBuilder.addOffset(1, signatureOffset);
    fbBuilder.addOffset(2, signerOffset);
    fbBuilder.addUint32(3, _version);
    fbBuilder.addUint16(4, _type);
    fbBuilder.addOffset(5, maxFeeOffset);
    fbBuilder.addOffset(6, deadlineOffset);
    fbBuilder.addUint8(7, _mosaicsCount);
    fbBuilder.addOffset(8, operationTokenOffset);
    fbBuilder.addUint16(9, _status);
    fbBuilder.addOffset(10, mosaicsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
